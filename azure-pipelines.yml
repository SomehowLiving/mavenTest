# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
# prog10
1. Create Java Project

Use Maven/Gradle with unit tests.


2. Push to GitHub

3. Create Azure DevOps Project

Go to: https://aex.dev.azure.com

Click New Project → Name it → Create


4. Set Up Self-Hosted Agent

Go to Project Settings > Agent Pools

Add Pool → Name: MyLocalPool → Select Self-hosted

Click pool → New agent

Download ZIP → Extract (e.g., C:\azureagent)

Configure:
cd C:\azureagent
config.cmd

Enter:

Azure DevOps URL

PAT token (create under profile > PAT)

Pool: MyLocalPool

Name: AzureAgent


Start agent:
run.cmd

5. Create Pipeline
Go to Pipelines > New Pipeline

Select GitHub repo → Starter pipeline


6. Paste YAML
trigger:
  - main

pool:
  name: 'MyLocalPool' #your agent

steps:
  - checkout: self
    displayName: 'Checkout Code from GitHub'

  - script: mvn clean test
    displayName: 'Build and Run Unit Tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/target/surefire-reports/TEST-*.xml'
      testResultsFormat: 'JUnit'
      failTaskOnMissingResultsFile: true
    displayName: 'Publish Maven Test Results'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: 'target'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    displayName: 'Publish Build Artifacts'

7. Run Pipeline

Click Run


8. View Results

Go to Pipelines > [Pipeline Name] > Runs

Click latest → Check Tests tab

    
trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'
